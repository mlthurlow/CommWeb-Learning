{"version":3,"sources":["components/summernote.js"],"names":["dmx","Component","initialData","disabled","value","attributes","type","String","default","Boolean","config","Object","height","Number","minHeight","maxHeight","autofocus","lang","airMode","toolbar","Array","toolbarImage","toolbarLink","toolbarTable","toolbarAir","blockquoteBreakingLevel","styleTags","fontNames","fontNamesIgnoreCheck","fontSizeUnits","lineHeights","placeholder","dialogsInBody","dialogsFade","disableDrop","disableShortcuts","disableTab","disableSpellcheck","disableGrammar","plugins","buttons","methods","disable","this","_disable","empty","_empty","enable","_enable","insertText","str","_innerText","pasteHTML","_pasteHTML","redo","_redo","reset","_reset","setValue","_setValue","undo","_undo","status","message","_editor","layoutInfo","editor","find","html","info","success","warning","danger","invoke","action","arg","events","blur","Event","change","changed","enter","focus","init","input","updated","buttonclick","mediadelete","node","_blurHandler","bind","_changeHandler","_enterHandler","_focusHandler","_initHandler","_mediaDeleteHandler","_config","popover","$","summernote","options","_callbacks","callbacks","onBlur","onChange","onEnter","onFocus","onInit","onMediaDelete","render","props","tagName","innerHTML","_initEditor","performUpdate","updatedProps","has","delete","size","destroy","clone","disableDragAndDrop","shortcuts","tabDisable","spellCheck","isArray","filter","group","length","image","link","table","air","console","error","extend","$node","data","statusbar","remove","set","code","nextTick","dispatchEvent","_code","target","src","attr","_toCamelCase","replace","a","b","toUpperCase","$parseAttributes","BaseComponent","prototype","call","dom","getAttributes","forEach","name","$watch","plugin","argument","icon","context","ui","button","contents","tooltip","click","parse"],"mappings":"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","file":"dmxSummernote.js","sourcesContent":["dmx.Component('summernote', {\r\n\r\n  initialData: {\r\n    disabled: false,\r\n    value: '',\r\n  },\r\n\r\n  attributes: {\r\n    value: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    config: {\r\n      type: Object,\r\n      default: {},\r\n    },\r\n\r\n    height: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    minHeight: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    maxHeight: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    autofocus: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    lang: {\r\n      type: String,\r\n      default: 'en-US',\r\n    },\r\n\r\n    airMode: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    toolbar: {\r\n      type: Array,\r\n      default: null, // use default from summernote (https://summernote.org/deep-dive/#custom-toolbar-popover)\r\n    },\r\n\r\n    toolbarImage: {\r\n      type: Array,\r\n      default: null, // use default from summernote (popover:{image:[...]})\r\n    },\r\n\r\n    toolbarLink: {\r\n      type: Array,\r\n      default: null, // use default from summernote (popover:{link:[...]})\r\n    },\r\n\r\n    toolbarTable: {\r\n      type: Array,\r\n      default: null, // use default from summernote (popover:{table:[...]})\r\n    },\r\n\r\n    toolbarAir: {\r\n      type: Array,\r\n      default: null, // use default from summernote (popover:{air:[...]})\r\n    },\r\n\r\n    blockquoteBreakingLevel: {\r\n      // https://summernote.org/deep-dive/#blockquote-breaking-level\r\n      type: Number,\r\n      default: 2,\r\n    },\r\n\r\n    styleTags: {\r\n      // https://summernote.org/deep-dive/#custom-styles\r\n      type: Array,\r\n      default: null,\r\n    },\r\n\r\n    fontNames: {\r\n      // https://summernote.org/deep-dive/#custom-fontnames\r\n      type: Array,\r\n      default: null,\r\n    },\r\n\r\n    fontNamesIgnoreCheck: {\r\n      // https://summernote.org/deep-dive/#custom-fontnames\r\n      type: Array,\r\n      default: null,\r\n    },\r\n\r\n    fontSizeUnits: {\r\n      // https://summernote.org/deep-dive/#custom-font-size-units\r\n      type: Array,\r\n      default: null,\r\n    },\r\n\r\n    lineHeights: {\r\n      // https://summernote.org/deep-dive/#custom-line-heights\r\n      type: Array,\r\n      default: null,\r\n    },\r\n\r\n    placeholder: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    dialogsInBody: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    dialogsFade: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableDrop: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableShortcuts: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableTab: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableSpellcheck: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableGrammar: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    plugins: {\r\n      type: Object,\r\n      default: {},\r\n    },\r\n\r\n    buttons: {\r\n      type: Object,\r\n      default: {},\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    disable () {\r\n      this._disable();\r\n    },\r\n\r\n    empty () {\r\n      this._empty();\r\n    },\r\n\r\n    enable () {\r\n      this._enable();\r\n    },\r\n\r\n    insertText (str) {\r\n      this._innerText(str);\r\n    },\r\n\r\n    pasteHTML (str) {\r\n      this._pasteHTML(str);\r\n    },\r\n\r\n    redo () {\r\n      this._redo();\r\n    },\r\n\r\n    reset () {\r\n      this._reset();\r\n    },\r\n\r\n    setValue (value) {\r\n      this._setValue(value);\r\n    },\r\n\r\n    undo () {\r\n      this._undo();\r\n    },\r\n\r\n    status (message) {\r\n      this._editor.layoutInfo.editor.find('.note-status-output').html(message);\r\n    },\r\n\r\n    info (message) {\r\n      this._editor.layoutInfo.editor\r\n        .find('.note-status-output')\r\n        .html('<div class=\"alert alert-info\">' + message + '</div>');\r\n    },\r\n\r\n    success (message) {\r\n      this._editor.layoutInfo.editor\r\n        .find('.note-status-output')\r\n        .html('<div class=\"alert alert-success\">' + message + '</div>');\r\n    },\r\n\r\n    warning (message) {\r\n      this._editor.layoutInfo.editor\r\n        .find('.note-status-output')\r\n        .html('<div class=\"alert alert-warning\">' + message + '</div>');\r\n    },\r\n\r\n    danger (message) {\r\n      this._editor.layoutInfo.editor\r\n        .find('.note-status-output')\r\n        .html('<div class=\"alert alert-danger\">' + message + '</div>');\r\n    },\r\n\r\n    invoke (action, arg) {\r\n      this._editor.invoke(action, arg);\r\n    },\r\n  },\r\n\r\n  events: {\r\n    blur: Event,\r\n    change: Event,\r\n    changed: Event,\r\n    enter: Event,\r\n    focus: Event,\r\n    init: Event,\r\n    input: Event,\r\n    updated: Event,\r\n    buttonclick: Event,\r\n    mediadelete: Event,\r\n  },\r\n\r\n  init (node) {\r\n    this._blurHandler = this._blurHandler.bind(this);\r\n    this._changeHandler = this._changeHandler.bind(this);\r\n    this._enterHandler = this._enterHandler.bind(this);\r\n    this._focusHandler = this._focusHandler.bind(this);\r\n    this._initHandler = this._initHandler.bind(this);\r\n    this._mediaDeleteHandler = this._mediaDeleteHandler.bind(this);\r\n\r\n    this._config = { popover: $.summernote.options.popover };\r\n\r\n    this._callbacks = {\r\n      callbacks: {\r\n        onBlur: this._blurHandler,\r\n        onChange: this._changeHandler,\r\n        onEnter: this._enterHandler,\r\n        onFocus: this._focusHandler,\r\n        onInit: this._initHandler,\r\n        onMediaDelete: this._mediaDeleteHandler,\r\n      },\r\n    };\r\n  },\r\n\r\n  render (node) {\r\n    if (this.props.value) {\r\n      if (node.tagName == 'TEXTAREA') {\r\n        node.value = this.props.value;\r\n      } else {\r\n        node.innerHTML = this.props.value;\r\n      }\r\n    }\r\n\r\n    this._initEditor();\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('value')) {\r\n      this._setValue(this.props.value);\r\n      updatedProps.delete('value');\r\n    }\r\n\r\n    if (updatedProps.has('disabled')) {\r\n      this._editor.invoke(this.props.disabled ? 'disable' : 'enable');\r\n      updatedProps.delete('disabled');\r\n    }\r\n\r\n    if (updatedProps.size) {\r\n      this._editor.destroy();\r\n      this._initEditor();\r\n    };\r\n  },\r\n\r\n  destroy () {\r\n    this._editor.destroy();\r\n  },\r\n\r\n  _initEditor () {\r\n    const config = dmx.clone(this._config);\r\n\r\n    config.height = this.props.height;\r\n    config.minHeight = this.props.minHeight;\r\n    config.maxHeight = this.props.maxHeight;\r\n    config.focus = this.props.autofocus;\r\n    config.lang = this.props.lang;\r\n    config.airMode = this.props.airMode;\r\n    config.placeholder = this.props.placeholder;\r\n    config.dialogsInBody = this.props.dialogsInBody;\r\n    config.dialogsFade = this.props.dialogsFade;\r\n    config.disableDragAndDrop = this.props.disableDrop;\r\n    config.shortcuts = !this.props.disableShortcuts;\r\n    config.tabDisable = this.props.disableTab;\r\n    config.spellCheck = !this.props.disableSpellcheck;\r\n    config.disableGrammar = this.props.disableGrammar;\r\n    config.blockquoteBreakingLevel = this.props.blockquoteBreakingLevel;\r\n\r\n    if (Array.isArray(this.props.toolbar)) {\r\n      // extra filter for empty group generated in Wappler\r\n      config.toolbar = this.props.toolbar.filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props.toolbarImage)) {\r\n      config.popover = config.popover || {};\r\n      config.popover.image = this.props.toolbarImage.filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props.toolbarLink)) {\r\n      config.popover = config.popover || {};\r\n      config.popover.link = this.props.toolbarLink.filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props.toolbarTable)) {\r\n      config.popover = config.popover || {};\r\n      config.popover.table = this.props.toolbarTable.filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props.toolbarAir)) {\r\n      config.popover = config.popover || {};\r\n      config.popover.air = this.props.toolbarAir.filter(function (group) {\r\n        return group.length;\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(this.props.styleTags)) {\r\n      config.styleTags = this.props.styleTags;\r\n    }\r\n\r\n    if (Array.isArray(this.props.fontNames)) {\r\n      config.fontNames = this.props.fontNames;\r\n    }\r\n\r\n    if (Array.isArray(this.props.fontNamesIgnoreCheck)) {\r\n      config.fontNamesIgnoreCheck = this.props.fontNamesIgnoreCheck;\r\n    }\r\n\r\n    if (Array.isArray(this.props.fontSizeUnits)) {\r\n      config.fontSizeUnits = this.props.fontSizeUnits;\r\n    }\r\n\r\n    if (Array.isArray(this.props.lineHeights)) {\r\n      config.lineHeights = this.props.lineHeights;\r\n    }\r\n\r\n    if (!$.summernote.lang[config.lang]) {\r\n      console.error(`Summernote \"${config.lang}\" lang file must be included.`);\r\n    }\r\n\r\n    $.extend(true, config, this.props.config, this.props.plugins, { buttons: this.props.buttons }, this._callbacks);\r\n\r\n    $(this.$node).summernote(config);\r\n\r\n    this._editor = $(this.$node).data('summernote');\r\n\r\n    this._editor.layoutInfo.statusbar.find('.note-status-output').remove();\r\n\r\n    if (this.props.disabled) {\r\n      this._disable();\r\n    }\r\n  },\r\n\r\n  _enable () {\r\n    this._editor.enable();\r\n    this.set('disabled', false);\r\n  },\r\n\r\n  _disable () {\r\n    this._editor.disable();\r\n    this.set('disabled', true);\r\n  },\r\n\r\n  _empty () {\r\n    this._editor.invoke('empty');\r\n  },\r\n\r\n  _innerText (str) {\r\n    this._editor.invoke('insertText', str);\r\n  },\r\n\r\n  _pasteHTML (str) {\r\n    this._editor.invoke('pasteHTML', str);\r\n  },\r\n\r\n  _undo () {\r\n    this._editor.invoke('undo');\r\n  },\r\n\r\n  _redo () {\r\n    this._editor.invoke('redo');\r\n  },\r\n\r\n  _reset () {\r\n    this._editor.reset();\r\n  },\r\n\r\n  _setValue (value) {\r\n    this._editor.reset();\r\n    if (value) {\r\n      this._editor.code(value);\r\n    }\r\n    this.set('value', value);\r\n    dmx.nextTick(() => this.dispatchEvent('updated'));\r\n  },\r\n\r\n  _initHandler () {\r\n    this.dispatchEvent('init');\r\n  },\r\n\r\n  _focusHandler () {\r\n    this._code = this._editor.code();\r\n    this.dispatchEvent('focus');\r\n  },\r\n\r\n  _blurHandler () {\r\n    if (this._code !== this._editor.code()) {\r\n      this.dispatchEvent('change');\r\n      dmx.nextTick(() => this.dispatchEvent('changed'));\r\n    }\r\n    this.dispatchEvent('blur');\r\n  },\r\n\r\n  _enterHandler () {\r\n    this.dispatchEvent('enter');\r\n  },\r\n\r\n  _changeHandler () {\r\n    const value = this._editor.invoke('isEmpty') ? '' : this._editor.code();\r\n\r\n    if (this.data.value !== value) {\r\n      this.set('value', value);\r\n      dmx.nextTick(() => this.dispatchEvent('updated'));\r\n    }\r\n\r\n    this.dispatchEvent('input');\r\n  },\r\n\r\n  _mediaDeleteHandler (target) {\r\n    const src = $(target[0]).attr('src');\r\n    this.dispatchEvent('mediadelete', null, { src });\r\n  },\r\n\r\n  _toCamelCase (str) {\r\n    return str.replace(/-(\\w)/g, function (a, b) {\r\n      return b.toUpperCase();\r\n    });\r\n  },\r\n\r\n  $parseAttributes (node) {\r\n    dmx.BaseComponent.prototype.$parseAttributes.call(this, node);\r\n\r\n    dmx.dom.getAttributes(node).forEach(attr => {\r\n      if (attr.name == 'plugin') {\r\n        this.$watch(attr.value, value => {\r\n          const plugin = this._toCamelCase(attr.argument);\r\n          this.props.plugins = { ...this.props.plugins, [plugin]: $.extend({}, $.summernote.options[plugin], value) };\r\n        });\r\n      }\r\n\r\n      if (attr.name == 'button') {\r\n        this.$watch(attr.value, value => {\r\n          if (value && value.icon) {\r\n            const name = this._toCamelCase(attr.argument);\r\n            this.props.buttons = { ...this.props.buttons, [name]: (context) => {\r\n              const ui = $.summernote.ui;\r\n              const button = ui.button({\r\n                contents: `<i class=\"${value.icon}\"/>`,\r\n                tooltip: value.tooltip || '',\r\n                click: () => {\r\n                  if (typeof value.click == 'string') {\r\n                    dmx.parse(value.click, this);\r\n                  }\r\n\r\n                  this.dispatchEvent('buttonclick', null, {\r\n                    editor: this.name,\r\n                    button: name,\r\n                  });\r\n                },\r\n              });\r\n\r\n              return button.render();\r\n            }};\r\n          }\r\n        });\r\n      }\r\n    });\r\n  },\r\n});\r\n"]}